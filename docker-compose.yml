version: '3.8'

services:
  # Main AgroBot Raspberry Pi application
  agrobot-rpi:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: agrobot-rpi-controller
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    env_file:
      - .env
    ports:
      - "8000:8000"  # HTTP API
      - "8001:8001"  # WebSocket
    volumes:
      # Configuration
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backups:/app/backups
      # Hardware access (Raspberry Pi specific)
      - /dev:/dev
      - /sys:/sys:ro
      - /proc:/proc:ro
    devices:
      # USB device for Pixhawk 6C
      - /dev/ttyACM0:/dev/ttyACM0
      # I2C access
      - /dev/i2c-1:/dev/i2c-1
      # SPI access  
      - /dev/spidev0.0:/dev/spidev0.0
      - /dev/spidev0.1:/dev/spidev0.1
    privileged: true  # Required for GPIO access on Raspberry Pi
    network_mode: host  # Required for proper hardware communication
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: agrobot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # PostgreSQL for local data storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: agrobot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: agrobot
      POSTGRES_USER: agrobot
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agrobot_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agrobot"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # MQTT broker for IoT communication (optional)
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: agrobot-mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Grafana for monitoring and visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: agrobot-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - postgres
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # InfluxDB for time-series data (optional)
  influxdb:
    image: influxdb:2.7
    container_name: agrobot-influxdb
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=agrobot
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:-agrobot_password}
      - DOCKER_INFLUXDB_INIT_ORG=agrobot
      - DOCKER_INFLUXDB_INIT_BUCKET=telemetry
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: agrobot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - agrobot-rpi
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # File backup service (optional)
  backup:
    image: alpine:latest
    container_name: agrobot-backup
    restart: "no"
    volumes:
      - ./data:/data:ro
      - ./logs:/logs:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/sh /backup.sh
    profiles:
      - backup

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: agrobot-network
    driver: bridge

